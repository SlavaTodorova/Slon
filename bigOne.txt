Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
Java Tips Weblog
HOME ABOUT CONTACT US CONTRIBUTIONS UPDATES WEB START INFO

 Search
Blog Stats

1,615,370 hits
Categories

Entry Type (121)
Application (4)
Classes (83)
Extensions (23)
Tips (19)
Package (121)
Awt (7)
Net (1)
Swing (113)
Table (4)
Util (3)
Uncategorized (1)
Archives

Archives

 Search
Meta

Register
Log in
Subscribe

Entries (RSS)
Comments (RSS)
« Backgrounds With TransparencyMoving Windows »
Table Cell Listener

Posted by Rob Camick on June 7, 2009

A TableModelListener is used to listen for changes to a TableModel. Relying solely on the TableModelListener can have potential drawbacks. In particular:

in some cases, a TableModelEvent is fired even though nothing has changed. This would happen when you place a table cell in editing mode but then simply tab (or click) off the cell without changing anything.
in all cases, when the event is received you only have access to the current state of the TableModel. This means that you know what has changed, but you don’t know what it was changed from.

In the first case this may result in extra processing being repeated, which may or may not be a big deal depending on the type of processing required. The second case is obviously a bigger problem when you have processing that needs to know the previous value of the cell. The information simply isn’t available.

There is a simple solution to handle both concerns. However, the solution discussed here is only applicable to updates made to the TableModel through a JTable via a table cell editor. The solution identifies when an actual change in the cell data occurs and then it invokes custom processing. The TableCellListener class implements the solution.

Lets take a quick look at how the TableCellListener works. A JTable fires a PropertyChangeEvent when a cell:

starts editing – therefore we can save the current value of the cell before it is changed (the old value)
finishes editing – therefore we can retrieve the current value of the cell (the new value). In addition, we can now compare the old and new values and invoke processing when they are different.
When creating a TableCellListener you need to provide a JTable and an Action as the parameters. The table is specified so we can listen for the above PropertyChangeEvents. The Action will be invoked when the values have changed. The TableCellListener will be the source of the Action so you will be able to access all the information about the changed cell value.

Test the TableCellListener by adding it to any table using code like the following:

Action action = new AbstractAction()
{
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
        System.out.println("Row   : " + tcl.getRow());
        System.out.println("Column: " + tcl.getColumn());
        System.out.println("Old   : " + tcl.getOldValue());
        System.out.println("New   : " + tcl.getNewValue());
    }
};

TableCellListener tcl = new TableCellListener(table, action);

In summary, the TableCellListener class can be used as a replacement for a TableModelListener in the special cases described above. Instead of implementing a TableModelListener you would implement an Action.

Get The Code

TableCellListener.java

About these ads

 
Related
Row Table Model
In "Classes"
Table Select All Renderer
In "Classes"
Table Column Adjuster
In "Classes"
This entry was posted on June 7, 2009 at 1:41 pm	and is filed under Classes, Swing. You can follow any responses to this entry through the RSS 2.0 feed. You can skip to the end and leave a response. Pinging is currently not allowed.
61 Responses to “Table Cell Listener”

LD said

July 25, 2009 at 8:40 pm
Hey Rob,

I implemented your TableCellListener class into my application and it works well. But I was wondering if it is possible to use the TableCellListener class to bring what I want to do to a higher level.

The thing is, I wanted to restrict the users only to enter positive values in the table cells, so I looked around in your blog and found this class. Now, after implementing the TableCellListener class, what my application does, concerning the tables, is: when the user edits a cell, and he enters a negative value, then hits tab or enter, the cell goes back to its old value.

However, what I would really want is: instead of letting the user enter all the unwanted characters (-~!@#$% etc…), the application should consume all of that – meaning not letting the user enter those character at all in the first place.

Can we do that using your TableCellListener class, or would recommend something else?

Regards,
LD

Reply
Rob Camick said

July 25, 2009 at 9:32 pm
Editing data is not part of the functionality of the TableCellListener. To do that you need to create a custom cell editor. The Swing tutorial explains the concept. You can use a JFormattedTextField as the editor or a JTextField with a DocumentFilter.

Reply
Chintan said

November 17, 2009 at 1:01 pm
Rob,
I liked the TableCellListener example that you have put up. But my environment is Java 1.5 so in effect I cannot use the utility since “convertRowIndexToModel” is not available in 1.5. Is there any workaround?

Thanks for all the help.

~ Chintan

Reply
Rob Camick said

November 17, 2009 at 3:08 pm
Well, it means you aren’t using any of the sorting or filtering features that where added in JDK6, so you should be able to just use the editing row directly.

Reply
Chintan said

November 17, 2009 at 3:16 pm
.Yeah, I figured that out & did this.

//	row = table.convertRowIndexToModel(table.getEditingRow());
row = table.getEditingRow();

Thanks for the prompt response. If you had be kind enough to let me know if it is possible to disable the table cell listener for certain columns then that would be great. I tried this,

if (“tableCellEditor”.equals(e.getPropertyName())) {
if (table.getEditingColumn() != columnIndexToBeIgnored) {
if (table.isEditing()) {
…
…
…

But this doesnt seem to work. Also there is amoment at which the table.editifingColumn becomes -1 even though I am in a specific column.

Thanks again.

Rob Camick said

November 17, 2009 at 3:28 pm
The comment in processEditingStarted() explains why you have this problem with the column.

The TableCellListener was designed to replace the TableModelListener, so this means the event is always fired. So your custom Action should filter out the columns you want to ignore.

Manish said

December 29, 2009 at 9:03 pm
Hi,
I am working on table model with combobox in jtable (in column 2).
How can i get the selected item for the selected combobox?

Thanks in advance.

Reply
Rob Camick said

December 29, 2009 at 11:09 pm
Any time a cell is edited, the changed value is always saved in the TableModel.

Reply
Mike B. said

January 24, 2011 at 12:52 pm
Wow this is really helpful.
But I was wondering how can I not include the cells in the first column of my table?

Reply
Rob Camick said

January 24, 2011 at 1:03 pm
The event is fired for all rows/columns. If you don’t care about the first column then you just ignore it. At the beginning of your Action you just add something like:

if (tcl.getColumn() == 0) return;

Reply
Alvaro said

April 23, 2011 at 11:59 pm
excelent code it was really helpfull and simple to use

Reply
Rob Camick said

April 25, 2011 at 12:36 pm
Glad it helped.

Reply
Jet said

July 25, 2011 at 8:14 am
you’re a life saver man… thank you!

Reply
Rob Camick said

July 25, 2011 at 9:18 am
Thanks for the reply.

Reply
Anonymous said

October 19, 2011 at 3:36 am
Very good !!!

Reply
Jeff said

December 12, 2011 at 10:11 pm
THANK YOU ! I know this is a couple years old now but I’ve spent 3 days trying to implement this functionality using listselections and listeners and whatnot with only partial success.

I just had to change …
Action action = new AbstractAction()
to …
AbstractAction action = new AbstractAction()

(using netbeans)

But it worked like a charm! Should be part of core!

Reply
Anonymous said

December 12, 2011 at 11:08 pm
Not sure why it doesn’t work for you when using Netbeans. AbstractAction implements the Action interface so you should be able to use the code as given in the example above. Anyway, glad the class does what you need.

Not sure why this comment is displayed with “Anonymous” as the user. Something is wrong with the comments.

Reply
D3viam said

December 17, 2011 at 2:00 pm
In:

1
2
3
4
5
6
public TableCellListener(JTable table, Action action)
    {
        this.table = table;
        this.action = action;
        this.table.addPropertyChangeListener( this );
    }
Line: this.table.addPropertyChangeListener( this );
Netbeans comment: Leaking this in constructor

Reply
Rob Camick said

December 17, 2011 at 2:31 pm
Not sure what that comment means, or what the suggested solution would be.

Reply
Viktor said

June 20, 2012 at 3:08 am
This may mean that if there is addPropertyListener, there should be corresponding removePropertyListener else where to avoid memory leaking.

P.S. Thanks for this nice solution anyway.

Amit said

March 1, 2012 at 4:40 am
Excellent !

Just what I wanted :)

Thank you!!

Reply
Rob Camick said

March 2, 2012 at 12:10 pm
Thanks for the feedback.

Reply
Mubashir said

March 19, 2012 at 3:39 am
This requires pressing enter key, what i require is that when the value is changed the event automatically fires.

Reply
Rob Camick said

March 19, 2012 at 9:47 am
This class has nothing to do with that type of functionality. If you want to know when data is changed in the editor then you need to add a DocumentListener to the editor.

Reply
Mubashir said

September 21, 2012 at 10:18 pm
Can you tell me how can i use The TableCellListener class with document listener event for the jtable. As I have written many events in my code for Action Event which uses your TableCellListener classs.

Mubashir said

September 22, 2012 at 12:24 am
Thanks For Your Reply , Actually i expicitly called Table Click Event On My Save Button Click Event

MouseEvent me = new MouseEvent(tblDetailInfo, 0, 0, 0, 100, 100, 1, false);
for(MouseListener ml: tblDetailInfo.getMouseListeners()){
ml.mouseClicked(me);
}
which solves my problem.

Kasun Bandara said

July 5, 2012 at 4:28 am
Nice work budy.
How can i fire event even data hasn’t changed in cell ?

Reply
Rob Camick said

July 5, 2012 at 9:35 am
Reread the blog. It talks about two other listeners that are used by the JTable and TableModel. Use the listener that meets your requirements.

Reply
Anonymous said

October 3, 2012 at 7:09 pm
Excellent code example for cell data change listener
Thanks

Reply
Anonymous said

January 14, 2013 at 8:50 pm
Works great! Thanks

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 10:03 am
Excellent!
It works like magic.

Reply
Aleksandr Zaigrayev (@Dw_3105) said

January 24, 2013 at 12:50 pm
to prevent null pointer exceptions i had to do this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
...
// Determine if data was changed
boolean data_changed = false;
if ( newValue == null ) {
    data_changed = ( oldValue != null );
}
else if ( oldValue == null ) {
    data_changed = ( newValue != null );
}
else {
    data_changed = !newValue.equals( oldValue ); 
}
 
// The data has changed, invoke the supplied Action
if ( data_changed ) {
...
Reply
Rob Camick said

January 31, 2013 at 6:43 pm
Not sure why you needed to do that. The supplied code works fine for me. That is I don’t get an Exception in the TableCellListener class when changing a cell that contains a null or when setting a cell to a null value. This is the behaviour I was going for.

Yes, the code in the sample Action does result in an Exception being thrown. The code in the Action is not complete as it should check for nulls. An Exception is still thrown in the Action with your fix as well.

Reply
Josue said

June 13, 2013 at 12:53 am
I did this :
if(newValue==null ^ oldValue==null) if (! newValue.equals(oldValue)) {…
and it is fixed, it’s the same logic proposed by Aleksandr Zaigrayev and works fine.

Shawn Lavelle said

November 6, 2014 at 12:13 pm
I have experienced this situation, and it’s always because oldValue wasn’t populated. Why might this occur and how can we prevent it? It also always seems to only apply to the first row in the table, not the rest, but I can’t verify that is *always* the case.

Luis said

October 8, 2013 at 2:00 pm
Aleksandr. I’m getting also NPE. Could you ellaborate where did you include such code? Thnaks.

Reply
Sudheer said

April 3, 2013 at 2:39 am
Excellent work Rob!!
I have used this TableCellListener in my project. My table has three rows – first two rows has combobox, and third row has text field.
And I am creating the two comboboxes dynamically with items when i am creating the rows.

Now my problem is, when i change the value in first column combobox, the items in second column combobox should be changed accordingly.

How to achieve this. I am struck here. because i have to get the row of the first combobox changed and update corresponding row second combobox.

Could you please help me in this regard.

Thanks!! in advance.

Reply
Antonis said

July 15, 2013 at 11:45 am
Why doesn’t it work if I implement my own AbstractTableModel , and use it as model of the table???

Reply
Rob Camick said

September 4, 2013 at 3:02 pm
I would guess you didn’t implement your model correctly. You probably don’t invoke the proper fireXXX methods when you change the model.

Reply
Gogalai said

September 3, 2013 at 9:30 am
Thank you so much for this. Saved me lot of time.

Reply
Rob Camick said

September 4, 2013 at 3:15 pm
Cool, have a drink on me!

Reply
Anonymous said

November 12, 2013 at 2:39 pm
good code, you are talented.

Reply
Anonymous said

December 18, 2013 at 11:32 am
Thanks so much for the code, it works wonders. I have a question though, and perhaps its because I am fairly new to Swing GUI programming but how would I fire this programmatically?

Reply
Rob Camick said

December 18, 2013 at 11:43 am
It wasn’t designed to be fired manually. I’m not sure why you would want to do this. But if you really want to try then take a look at the code from the processEditingStopped() method. You would need to create the TableCellListener, the ActionEvent and then invoke the ActionListener.

Reply
Anonymous said

December 18, 2013 at 2:01 pm
I agree it is a very odd use case. The basic gist is that I have codes in a JTable, I use your TableCellListener, to fire off a task to get a description of the code and update the table. However there are multiple versions and some codes are valid in one version and not in another. So when the user changes versions (through another control), I need to fire off the task and go get the description for the codes in the table, that is where the programmatic firing comes in.

Anywho, you suggestion lead me in the right direction and I have it working now. Pretty obvious solution, not sure how I missed it in the first place.

Thanks again for this!

Anonymous said

January 9, 2014 at 2:02 pm
Hi Rob,

Is there a way to make this fire on every key stroke? Or do you have another method for when something needs to fired on every key stroke?

Thanks.

Reply
Najib Mozahem said

February 17, 2014 at 9:04 am
Hi. I tried using the TableCellListener class but I am having a problem. Everything seems to work fine if the user uses the mouse to navigate between cells and to change the data. if the user uses the TAB key then I get an error when the cursor moves to the last column of the table. This is the error:
Exception in thread “AWT-EventQueue-0” java.lang.ArrayIndexOutOfBoundsException: -1
The problem is that the listener is firing when the user presses the TAB key to move from column number 2 to the last column even though no changes are made. This does not happen with other columns. I would appreciate your help. Thanks.

Reply
Rob Camick said

February 17, 2014 at 11:50 am
I can’t duplicate the problem. If you can create a proper SSCCE and send it to me using the “Contact Us” page, then I can take a look.

Reply
Kumar said

August 1, 2014 at 6:55 am
Please someone give me the example of how can i use these button on the click of the enter(keyEvent e) . Thanks in advance.

Reply
Rob Camick said

August 1, 2014 at 9:36 am
What buttons?

Reply
Kumar said

August 1, 2014 at 10:29 am
Thanks for reply Rob
I wanna know how can i implement the the keyListener event on the button of tableModel. actually i am populating the data from sqlight database to the jtable and in each cell i have shown a “edit” and “select” button, functionality of edit and select button are working fine when i click those button with mouse click event also when i press “space Bar” from keyboard it still works fine but i wanna know how can i do this thing(“edit” and “select”) with click of Enter/return button.

Rob Camick said

August 1, 2014 at 12:01 pm
This class has nothing to do with buttons.

Shawn Lavelle said

November 6, 2014 at 12:20 pm
I love this class, but I’ve encountered a problem, and I think it stems from the reliance on PropertyChangeListener and what it responds to. Well, here’s the setup:

The TableModel is a DefaultTableModel anonymously extended to override the getColumnClass to be that of { Object, Boolean, Boolean, and Object }. Otherwise, it’s a standard implementation. Boolean class renders as a jCheckbox by default. Clicking on the checkbox and changing its value does not always result in PropertyChangeListener firing.

1
2
3
4
5
6
7
8
9
10
11
12
13
new javax.swing.table.DefaultTableModel(
            new Object [][] { },
            new String [] { "Name", "Display", "Activate", "Delete" } )
            {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                };
 
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            };
Do you have any thoughts onto why this might be and what changes could be made to resolve the issue?

Does this class still function properly in Java1.6/1.7/1.8+?

Thanks for your time,
~ Shawn

Reply
Rob Camick said

November 6, 2014 at 12:57 pm
It still works for me in JDK7 on Windows 7. When I tested I also extended the DefaultTableModel with an annonymous inner class. I have no idea why the PropertyChangeListener doesn’t fire. The PropertyChangeListener is added to the JTable, not the TableModel and is invoked when the table starts/stops editing so a custom TableModel should have no affect.

I am going on vacation in a couple of hours. The best I can do is give you my test code that I modified in an attempt to duplicate your situation:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
 
public class TableCellListenerTest
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
 
    public static void createAndShowGUI()
    {
        String[] columnNames = {"Stock", "Shares", "Price", "Price Change", "Value", "Boolean"};
        Object[][] data =
        {
            {null, null, null, null, null, null},
            {"IBM",    new Integer(100),  new Double(85),  new Double(0), new Double(8500), Boolean.TRUE},
            {"Apple",  new Integer(300),  new Double(30),  new Double(0), new Double(9000), Boolean.FALSE},
            {"Sun",    new Integer(1500), new Double(5),   new Double(0), new Double(7500), Boolean.TRUE},
            {"Google", new Integer(100),  new Double(100), new Double(0), new Double(10000), Boolean.FALSE}
        };
 
        DefaultTableModel model = new DefaultTableModel(data, columnNames)
        {
            public Class getColumnClass(int column)
            {
                return getValueAt(1, column).getClass();
            }
 
            public boolean isCellEditable(int row, int column)
            {
                return true;
            }
        };
 
        JTable table = new JTable(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        JScrollPane scrollPane = new JScrollPane(table);
 
        Action action = new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                TableCellListener tcl = (TableCellListener)e.getSource();
                int column = tcl.getColumn();
 
                System.out.println(tcl.getOldValue() + " : " + tcl.getNewValue());
            }
        };
 
        TableCellListener tcl = new TableCellListener(table, action);
        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame("Table Cell Listener");
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.add( scrollPane );
        frame.setSize(400, 160);
        frame.setLocationRelativeTo( null );
        frame.setVisible(true);
    }
}
Reply
Trevor Sandy said

November 21, 2014 at 7:35 pm
Thanks for this excellent sample. Here are a few nice enhancements:

– Allow user to “rollback” a change.

…Add this method to TableCellListener.java:

1
2
3
4
5
6
7
/*
 * Rollback the change 
 */
public void rollback()
{
    table.getModel().setValueAt(oldValue, row, column);
}
..Update action like this:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
Action action = new AbstractAction()
{
        /**
     * 
     */
    private static final long serialVersionUID = 1L;
 
    @Override
    public void actionPerformed(ActionEvent e)
    {
        TableCellListener tcl = (TableCellListener)e.getSource();
         
        int response = JOptionPane.showConfirmDialog(table, "The following change will be committed:\n " +
                "New Value : " + tcl.getNewValue() + "\n" +
                "Old Value : " + tcl.getOldValue() + "\n" +
                "Row       : " + tcl.getRow() + "\n" +
                "Column    : " + tcl.getColumn(), 
                "Confirm replace", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response != JOptionPane.YES_OPTION) 
            tcl.rollback();
    }
};
Reply
Gaurav said

February 7, 2015 at 8:17 am
I wanted to put apply listeners to JButtons which I out in cell of JTables. Will u plz help me out??

Reply
Charles said

July 5, 2015 at 5:37 pm
Why aren’t your blogs the first thing that shows in Google. I always find the solution here in your blogs.

Reply
Mentaali said

September 3, 2015 at 6:44 pm
Had a problem with a jTable, this TableCellListener really helped me out. There’s an issue though, when you enter a null value in a cell and press the ENTER key and then press the ESCAPE key afterwards, it throws a NullPointerException.

Possible solution?

Thanks.

Reply
Rob Camick said

September 3, 2015 at 8:14 pm
I can’t duplicate the problem based on your description. So you need to debug the problem yourself. You know the line causing the problem so figure out which variable is null and add a check for a null value. As far as I can tell my code already checks for null values so I would guess the problem is in your Action trying to access a null variable.

Reply
And1 said

November 17, 2015 at 2:27 am
thanks !!! its good !!

Reply
Anonymous said

November 26, 2015 at 6:30 am
I’d like to express my deepest thanks in this code! It really helped me a lot!

Reply
Leave a Reply


Enter your comment here...
« Backgrounds With TransparencyMoving Windows »
 
Blog at WordPress.com. | The Andreas09 Theme.
Follow
Follow “Java Tips Weblog”

Get every new post delivered to your Inbox.

Join 107 other followers


Enter your email address

Sign me up

Build a website with WordPress.com
